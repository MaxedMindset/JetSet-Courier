//
//  ContentView.swift
//  SkyCraftBuildAndFly
//
//  Erstellt von ChatGPT
//
//  Diese ContentView bettet einen SKView (der deine SpriteKit-Szene, z. B. MainMenuScene, lädt)
//  in eine SwiftUI-Oberfläche ein. Sie zeigt ein dekoratives Overlay mit einem Titel und einem "Play"-Button,
//  und bietet zusätzliche Navigationsbuttons für Einstellungen und High Scores. Sobald der Spieler auf "Play" drückt,
//  verschwindet das Overlay und der SKView wird vollständig interaktiv. Außerdem kannst du über die Navigationsleiste
//  weitere Menüpunkte aufrufen (z. B. Einstellungen oder Ranglisten).
//

import SwiftUI
import SpriteKit

// MARK: - GameViewRepresentable
struct GameViewRepresentable: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        
        // Debug-Optionen: (Zum Testen – später evtl. deaktivieren)
        skView.showsFPS = true
        skView.showsNodeCount = true
        skView.ignoresSiblingOrder = true
        
        // Lade die Startszene (z. B. MainMenuScene)
        let scene = MainMenuScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) {
        // Hier können Updates vorgenommen werden, wenn nötig.
    }
}

// MARK: - ContentView
struct ContentView: View {
    // Steuere, ob das Overlay (mit Titel & Play-Button) angezeigt wird
    @State private var showOverlay: Bool = true
    // Zustände für zusätzliche Menüpunkte
    @State private var showSettings: Bool = false
    @State private var showHighScores: Bool = false
    
    var body: some View {
        NavigationView {
            ZStack {
                // Der SKView mit deiner SpriteKit-Szene
                GameViewRepresentable()
                    .edgesIgnoringSafeArea(.all)
                
                // Overlay, das beim Start angezeigt wird
                if showOverlay {
                    ZStack {
                        // Visueller Blur-Effekt als Hintergrund
                        VisualEffectBlur(blurStyle: .systemUltraThinMaterialDark)
                            .edgesIgnoringSafeArea(.all)
                        
                        VStack(spacing: 40) {
                            Spacer()
                            
                            // Titel
                            Text("SkyCraft: Build & Fly")
                                .font(.system(size: 48, weight: .bold, design: .rounded))
                                .foregroundColor(.white)
                                .shadow(color: .black, radius: 2, x: 2, y: 2)
                            
                            // Beschreibung/Slogan
                            Text("Bau dein Flugzeug, teste deine Physik und fliege in die Freiheit!")
                                .font(.system(size: 20, weight: .medium, design: .rounded))
                                .foregroundColor(.white)
                                .multilineTextAlignment(.center)
                                .padding(.horizontal, 40)
                            
                            Spacer()

                            // NavigationLink zum Flugzeugbau-Modus
                            NavigationLink(destination: BuildYourPlaneView().edgesIgnoringSafeArea(.all)) {
                            Text("Build Your Plane")
                                .font(.system(size: 32, weight: .bold, design: .rounded))
                                .foregroundColor(.white)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(RoundedRectangle(cornerRadius: 12).fill(Color.green))
                                .padding(.horizontal, 40)
                }
                
                            // NavigationLink zum Flugmodus
                            NavigationLink(destination: StartFlightView().edgesIgnoringSafeArea(.all)) {
                            Text("Start Flight")
                                .font(.system(size: 32, weight: .bold, design: .rounded))
                                .foregroundColor(.white)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(RoundedRectangle(cornerRadius: 12).fill(Color.blue))
                                .padding(.horizontal, 40)
                }
                
                Spacer()
            }
            .navigationBarHidden(true)
        }
    }
}
                            
                            // Play-Button
                            Button(action: {
                                withAnimation(.easeOut(duration: 0.5)) {
                                    showOverlay = false
                                }
                            }) {
                                Text("Play")
                                    .font(.system(size: 32, weight: .bold, design: .rounded))
                                    .foregroundColor(.white)
                                    .padding()
                                    .frame(maxWidth: .infinity)
                                    .background(
                                        RoundedRectangle(cornerRadius: 12)
                                            .fill(Color.blue)
                                            .shadow(color: Color.black.opacity(0.3), radius: 5, x: 2, y: 2)
                                    )
                                    .padding(.horizontal, 50)
                            }
                            .padding(.bottom, 50)
                        }
                    }
                    .transition(.opacity)
                }
            }
            // Navigationsleiste mit zusätzlichen Menüpunkten
            .navigationBarItems(
                trailing: HStack(spacing: 20) {
                    // High Scores Button
                    Button(action: {
                        showHighScores = true
                    }) {
                        Image(systemName: "list.number")
                            .font(.title)
                            .foregroundColor(.white)
                    }
                    // Settings Button
                    Button(action: {
                        showSettings = true
                    }) {
                        Image(systemName: "gearshape.fill")
                            .font(.title)
                            .foregroundColor(.white)
                    }
                }
            )
            // Sheet-Präsentationen für Settings und High Scores
            .sheet(isPresented: $showSettings) {
                SettingsView()
            }
            .sheet(isPresented: $showHighScores) {
                HighScoresView()
            }
        }
    }
}

// MARK: - SettingsView
struct SettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Einstellungen")) {
                    Toggle("Sound", isOn: .constant(true))
                    Toggle("Vibration", isOn: .constant(true))
                }
            }
            .navigationTitle("Settings")
            .navigationBarItems(trailing: Button("Done") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// MARK: - HighScoresView
struct HighScoresView: View {
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            List {
                // Beispiel: Dummy-Daten für High Scores
                ForEach(0..<10) { index in
                    HStack {
                        Text("Spieler \(index + 1)")
                        Spacer()
                        Text("\(Int.random(in: 1000...10000)) Punkte")
                    }
                }
            }
            .navigationTitle("High Scores")
            .navigationBarItems(trailing: Button("Done") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// MARK: - VisualEffectBlur
struct VisualEffectBlur: UIViewRepresentable {
    var blurStyle: UIBlurEffect.Style = .systemMaterial
    
    func makeUIView(context: Context) -> UIVisualEffectView {
        return UIVisualEffectView(effect: UIBlurEffect(style: blurStyle))
    }
    
    func updateUIView(_ uiView: UIVisualEffectView, context: Context) {
        uiView.effect = UIBlurEffect(style: blurStyle)
    }
}

// MARK: - ContentView_Previews
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
