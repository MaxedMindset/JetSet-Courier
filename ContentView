//
//  ContentView.swift
//  SkyCraftBuildAndFly
//
//  Erstellt von ChatGPT
//
//  Diese ContentView bietet über NavigationLinks den Zugriff auf alle Spielmodi und Erweiterungen.
//  Der Spieler kann zwischen Tutorial, Hauptmenü, Multiplayer, Cosmetics, Replay und erweiterten Einstellungen wählen.
//
import SwiftUI
import SpriteKit

struct ContentView: View {
    var body: some View {
        NavigationView {
            List {
                NavigationLink("Tutorial", destination: TutorialView())
                NavigationLink("Main Menu", destination: MainMenuSceneView())
                NavigationLink("Multiplayer (Stub)", destination: MultiplayerSceneView())
                NavigationLink("Cosmetics (Stub)", destination: CosmeticsSceneView())
                NavigationLink("Replay Mode (Stub)", destination: ReplaySceneView())
                NavigationLink("Extended Settings", destination: ExtendedSettingsSceneView())
            }
            .navigationTitle("SkyCraft Hub")
        }
    }
}

struct MainMenuSceneView: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        let scene = MainMenuScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) { }
}

struct MultiplayerSceneView: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        let scene = MultiplayerScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) { }
}

struct CosmeticsSceneView: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        let scene = CosmeticsScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) { }
}

struct ReplaySceneView: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        let scene = ReplayScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) { }
}

struct ExtendedSettingsSceneView: UIViewRepresentable {
    func makeUIView(context: Context) -> SKView {
        let skView = SKView(frame: UIScreen.main.bounds)
        let scene = ExtendedSettingsScene(size: skView.bounds.size)
        scene.scaleMode = .aspectFill
        skView.presentScene(scene)
        return skView
    }
    
    func updateUIView(_ uiView: SKView, context: Context) { }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

